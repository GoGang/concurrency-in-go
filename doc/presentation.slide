Concurrency in Go
7th July 2015

Benjamin Chenebault & Jacques Antoine Massé
Orange Applications for Business

* Sommaire

- De Java vers Go
- La concurrence, le paradigme du XXIe siècle
- La concurrence et le parallélisme
- Golang en 10 slides (à peine)
- 20' Live coding


* De Java vers Go

* Qui sommes nous ?

Deux développeurs bordelais,

- Issus du monde Java,
- Spécialisés dans la conception de plateformes haute disponibilité,
- Noyés dans des problématiques de programmation concurrente,
- Et bercés au quotidien dans des problémes de flux réseau... 

* Quel est notre environnement ?

.image images/xms.jpg _ 700

- ~ 30 applis en production
- Langages Java, C & Python
- 6 dev, 3 ops
- Plusieurs centaines de clients
- 900 millions de sms/an

* D'où cet intérêt à Golang ?

.image images/sgsenabler.jpg _ 700

- Principal module d'accès à la plate-forme
- Maintenance très coûteuse et complexe
- Décision de réécriture complète
- Critères de choix : développement et maintenance simple, performance au runtime, consommations CPU et mémoire faibles

* Etude comparative

2 POCs équivalents réalisés en Java et en Go incluant :
serveur HTTP, analyseur de trames, routeur & loadbalancer

*Résultats*

- Temps moyen par requête 10 fois plus faible en Go qu'en Java en charge
- Résultats de tests d'endurance sur serveur de PRP 
 Java : 94% CPU, 8.5% RAM
 Go : 2% CPU, 1.2% RAM
- Résultat de tests aux limites sur serveur de PRP 
 Java : 139 req./s 
 Go : 254 req./s

* La concurrence, le paradigme du XXIe siècle

* Moore or not Moore

.image images/moore.jpg _ 500

* Ok, et alors ?

.image images/thread.jpg _ 300

.image images/monkey.jpg _ 200

* La concurrence, c'est pas du parallélisme

* Concurrence != Parallélisme

- Concurrence : Conception de programmes comme un ensemble processus s'exécutant indépendamment. C'est du design.

- Parallélisme : Exécution de processus simultanés. C'est une question d'architecture de machine, sur une machine monocoeur, on peut pas paralléliser.

* Exemple : Indexation des titres de pages wikipedia

Système non concurrent, non parallèle

.image images/concurrence1.png _ 700

* Exemple : Indexation des titres de pages wikipedia

Système (peut-être) concurrent, non parallèle

.image images/concurrence2.png _ 900

* Exemple : Indexation des titres de pages wikipedia

Système concurrent et (peut-être) parallèle

.image images/concurrence3.png _ 800

* La conception concurrente

- C'est un paradigme de programmation
- Consiste à décomposer un système complexe en sous-systèmes plus simples
- On ne parle pas d'objets, ni de fonctions, ni de procédures, mais de processus

- Ces sous-systèmes peuvent fonctionner en concurrence…
- … et potentiellement en parallèle

* Modèle de concurrence

* Thread et locks, le modèle habituel

.image images/sharedmemory.png _ 800

* Thread et locks, le modèle habituel

*Avantages*

+ Analogue au fonctionnement de la machine

*Inconvénients*

- Identification des points de synchronisation difficile
- Difficilement testable, débuggage chronophage
- "Saupoudrage" de la concurrence sur le design métier
- Pilotage de la contention

* Le modèle par passage de message

- Communicating Sequential Process (Hoare, 1978)

.image images/messagepassing.png _ 800

Patterns : Pipelines, fan in/out, timeout, pub/sub,…

* Le modèle par passage de message

*Avantages*

+ Concurrence paradigme du langage
+ Patterns de conception connus
+ Métier == concurrence
+ Plus Testable
+ Outillage dédié

*Inconvénients*

- On perd de vue le fonctionnement de la machine

* Le modèle par passage de message

*Quelques* *patterns*

- Fan in/Fan out_M
- Active Object/Monitor Object
- Programmation par évènements
- Message queuing
- Publication/Subscription


- Patterns spécifiques au langage (quit channel, pools de channels, ...)

* Un tour de Go en 5 slides

* Cf Wikipedia

- V1.0 sortie en mars 2012
- Créé par R.Pike, K.Thompson, R. Griesemer
- Procédural, un peu objet, un peu fonctionnel
- Garbage collecté
- Compilé
- Typage fort, statique
- Orienté concurrence
- Open source

* Les channels

- Primitive du langage 
- File FIFO
- Assure la communication inter process
- `select` permet de "poller" plusieurs channels

* Les goroutines

- Exécution d'un appel de fonction dans un processus dédié
- Mot clé `go`
- Primitive du langage
- Faible occupation mémoire (~4ko/goroutine)
- Task switching peu significatif
- Multiplexé sur un ou plusieurs threads de l'OS

* Du code

.code -edit -numbers code/goroutine.go /^func producer/,/^}/
.code -edit -numbers code/goroutine.go /^func consumer/,/^}/

* Du code

.code code/goroutine.go /^func main/,/^}/

* Scheduling

* Cœurs et goroutines

.image images/sched1.jpg _ 650

* Cœurs et goroutines

.image images/sched2.jpg _ 600

* Cœurs et goroutines - Work Stealing

.image images/sched3.jpg _ 650

* Cœurs et goroutines - Work Stealing

.image images/sched4.jpg _ 500

* Traçage du scheduler 

.play code/schedule.go /^var/,/^}/

go build schedule.go && GODEBUG=schedtrace=10;scheddetail=1 ./schedule -cores 4 -n 10

* Traçage du scheduler 

     SCHED 0ms: gomaxprocs=1 idleprocs=0 threads=2 spinningthreads=0 idlethreads=0 runqueue=0 \
     											[2]
     SCHED 11ms: gomaxprocs=4 idleprocs=0 threads=5 spinningthreads=0 idlethreads=0 runqueue=2933 \
     											[159 128 125 128]
     SCHED 29ms: gomaxprocs=4 idleprocs=0 threads=5 spinningthreads=0 idlethreads=0 runqueue=2933 \
     											[128 126 108 109]

- gomaxprocs : nombre de processeurs logiques utilisés
- idleprocs : nombre de processus en attente

- threads : threads de l'OS utilisés par le runtime (1 pour le processeur go)
- spinningthreads : threads en écoute active 
- idlethreads : threads inoccupés

- runqueue : nombre de goroutines en file d'attente globale
- [nombre de goroutines par file d'attente locale]

* 20' live coding

* MapReduce

*Objectif:* Indexer le contenu de Wikipedia

.image images/mapreduce.jpg _ 700

* Références

.image images/book1.jpg _ 200
.image images/book2.jpg _ 200

* Questions ?

* Annexe

- Retour d'expérience sur Go : https://github.com/GoGang/RetourDExperience
