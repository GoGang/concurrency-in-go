Concurrency in Go
28 Mai 2015

Benjamin Chenebault & Jacques Antoine Massé
Orange Applications for Business

* Sommaire

- Quelques mots
- La concurrence c'est pas du parallélisme
- Golang en 5 slides (à peine)
- 10' Live coding

* Quelques mots

* Qui sommes nous ?

Deux développeurs bordelais,

- Issus du monde Java,
- Spécialisés dans la conception de plateformes haute disponibilité,
- Noyés dans des problématiques de programmation concurrente,
- Et bercés au quotidien dans des problémes de flux réseau... 

* Moore or not Moore

.image moore.jpg _ 500

* Ok, et alors ?

.image thread.jpg _ 300

.image monkey.jpg _ 200

* La concurrence, c'est pas du parallélisme

* Concurrence != Parallélisme

- Concurrence : Conception de programmes comme un ensemble processus s'exécutant indépendamment. C'est du design.

- Parallélisme : Exécution de processus simultanés. C'est une question d'architecture de machine, sur une machine monocoeur, on peut pas paralléliser.

* Exemple : Indexation des titres de pages wikipedia en

- Non concurrent, non parallèle

.image concurrence1.png _ 700

* Exemple : Indexation des titres de pages wikipedia en

- Concurrent ? Parallèle ?

.image concurrence2.png _ 900

* Exemple : Indexation des titres de pages wikipedia en

- Concurrent ? Parallèle ?

.image concurrence3.png _ 800

* Conception concurrente

- Paradigme : Analogue à l'objet, au fonctionnel
- Consiste à décomposer un système complexe en sous-systèmes plus simples
- On ne parle pas d'objets, ni de fonctions, ni de procédures

- Ces sous-systèmes peuvent fonctionner en concurrence…
- … et potentiellement en parallèle

- Bref : pas une conception objet ou fonctionnelle sur laquelle on plaque des mutexes

* Conception concurrente

- Scalable 
- "Simple"
- Rapide
- Maintenable

* Conception concurrente

- Partager de l'information en communiquant
- et non communiquer en partageant de l'information

- Nécessité de processus et communication interprocessus comme objets de base du langage

* Un tour de Go en 5 slides

* Cf Wikipedia

- V1.0 sortie en mars 2012
- Créé par R.Pike, K.Thompson, R. Griesemer
- Procédural, un peu objet, un peu fonctionnel
- Garbage collecté
- Compilé
- Typage fort, statique
- Orienté concurrence
- Open source

* Les channels

- Primitive du langage 
- File FIFO
- Très largement utilisée pour gérer la concurrence et les attentes de thread
- `select` permet de "poller" plusieurs channels

* Les goroutines

Exécution d'un appel de fonction en concurrence

- Mot clé `go`
- Primitive du langage
- Faible occupation mémoire (~4ko/goroutine)
- Task switching peu significatif
- Multiplexé sur un ou plusieurs threads de l'OS

* Les goroutines

.code -numbers goroutine.go

* 10' live coding

* MapReduce

Comment indexer le contenu de Wikipedia avec 30 lignes de code ?

.image mapreduce.png _ 700

* Références

.image book1.jpg _ 200
.image book2.jpg _ 200

* Questions ?

* Pour les timides

- Twitter : @TheBenC_ , @morphocapics
- Gmail : benjamin.chenebault@gmail.com, jacquesantoine.masse@gmail.com 
- Retour d'expérience sur Go : https://github.com/GoGang/RetourDExperience



